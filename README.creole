= nsjs

One JS file to rule them all.

== Mathematical Functions

=== bin(x)

=== cyc(x, size)

Convert {{{x}}} to a number between 0 and size - 1 based on a repeating
cycle along a number line. For zero and positive integers, this
produces the same result as the modulo ({{{%}}}) operator. For negative
numbers, the formula {{{(x % size + size) % size}}} applies.

Assuming size 4, the following transformations would occur:

{{{
                     x
  -6 -5 -4 -3 -2 -1  0 +1 +2 +3 +4 +5 +6
<--+--+--+--+--+--+--+--+--+--+--+--+--+-->
   2  3  0  1  2  3  0  1  2  3  0  1  2
                 cyc(x, 4)
}}}

=== hex

=== range

=== sign

== Time Functions

== Core Language Enhancements

=== each(data, [func, [func, [...]]])

A looping construct which can be used on arrays, array-like objects,
simple objects and single values. Functionality includes that provided
by both {{{forEach}}} loops and the {{{map}}} function.

Each item within the input data is passed sequentially through the
functions provided, returning the final output value within a
similarly-typed output construct.

==== Looping through a collection

{{{
each([1, 2, 3, 4, 5], function() {
    writeln("Number " + this);
});
}}}

==== Mapping a collection of values

{{{
var squares = each([1, 2, 3, 4, 5], function() {
    return this * this;
});
}}}

==== Chaining multiple functions

{{{
var tags = each(doc.body.children,
    function() { return this.tagName },
    String.prototype.toLowerCase
);
}}}

=== rarr(x, times)

Generate an array of repeated values.

=== rstr(x, times)

Generate a string of repeating values.

=== type(x)

Return a string identifying the type of an object or value.

== DOM Enhancements

=== id(x)

Shorter alias for {{{getElementById(x)}}}.

=== tag(x, [parent])

Shorter alias for {{{getElementsByTagName(x)}}}, optionally within the
supplied {{{parent}}} element.

=== cls(x, [parent])

Shorter alias for {{{getElementsByClassName(x)}}}, optionally within the
supplied {{{parent}}} element.

=== text(x)

Create a text node containing the text `x`.

=== elem(tag, [attrs])

Create an element of type {{{tag}}}, optionally with the attributes
supplied by {{{attrs}}}.

{{{
var foo = elem("div");
var bar = elem("span", {"class": "foo"});
}}}

=== build

=== put(x, [parent])

=== write

=== writeln

=== walk

== Syntax Highlighting

=== code(element, lang)

Apply syntax highlighting in the language specified to all {{{<code>}}}
tags on or below the element provided.

Languages currently supported:

* Python

{{{
each(tag("pre"), function() {
    if (this.hasClass("python"))
        code(this, "python");
});
}}}

